================================================================================
                        PROJECT ARCHITECTURE, METHODS, AND TOOLS
================================================================================

1. ARCHITECTURE
===============

This project follows a modern frontend architecture using React and Vite. The 
structure is component-based, with reusable UI elements organized under the 
src/components directory. State management and API interactions are handled via 
custom hooks in src/hooks. Styling is managed using Tailwind CSS and custom CSS 
files. The entry point is src/main.tsx, which bootstraps the application and 
renders the main App component. The project is configured for fast development 
and optimized builds using Vite, with TypeScript for type safety.

Directory Overview:
------------------
• src/components/    - Reusable React components (Dashboard, AnalyticsDashboard, 
                      Forecasting, Login, BloodUsage, etc.)
• src/hooks/         - Custom hooks for API and state management
• src/assets/        - Static assets (images, icons)
• public/            - Public files served by Vite
• index.html         - Main HTML template

Key Components:
--------------
• Dashboard.tsx         - Main dashboard interface
• AnalyticsDashboard.tsx - Analytics and reporting interface
• Forecasting.tsx       - Data forecasting functionality
• BloodUsage.tsx        - Blood usage tracking
• Login.tsx             - User authentication
• FeedbackAnalytics.tsx - User feedback analysis
• AddSample.tsx         - Sample data entry
• TestAPI.tsx           - API testing components

2. METHODS USED
===============

• Component-Based Development
  -------------------------
  UI is split into modular, reusable React components for maintainability 
  and scalability. Each component has its own CSS file for styling.

• Type Safety
  -----------
  TypeScript is used throughout the codebase to catch errors early and 
  improve code quality. Strict typing ensures better development experience.

• API Integration
  ---------------
  Custom hooks (useApi.ts) are used to fetch and manage data from backend 
  services. This provides a clean separation of concerns.

• State Management
  ----------------
  Local component state and hooks are used for managing UI state. React's 
  built-in state management is utilized for simplicity.

• Styling Architecture
  --------------------
  Tailwind CSS provides utility-first styling combined with custom CSS files 
  for component-specific styles. This ensures responsive and maintainable 
  design.

• Testing Strategy
  ----------------
  Test files (test-predictive.js) are included for validating functionality 
  and ensuring code reliability.

• Build Optimization
  ------------------
  Vite is used for fast development server and optimized production builds, 
  providing excellent developer experience.

3. TOOLS USED
=============

Development Framework:
---------------------
• React              - JavaScript library for building user interfaces
• TypeScript         - Superset of JavaScript providing type safety
• Vite               - Modern build tool for fast development and builds

Styling & UI:
------------
• Tailwind CSS       - Utility-first CSS framework for rapid styling
• Custom CSS         - Component-specific styling files

Code Quality:
------------
• ESLint             - Linting tool for maintaining code quality standards
• TypeScript Config  - Strict type checking configuration

Build & Processing:
------------------
• PostCSS            - CSS processing tool for transformations
• Vite Config        - Build configuration and optimization

Deployment:
----------
• Vercel             - Cloud deployment platform (configured via vercel.json)

Configuration Files:
-------------------
• package.json       - Project dependencies and scripts
• tsconfig.json      - TypeScript configuration
• tailwind.config.js - Tailwind CSS customization
• eslint.config.js   - ESLint rules and configuration
• vite.config.ts     - Vite build configuration
• postcss.config.js  - PostCSS processing configuration

================================================================================
This document provides a comprehensive overview of the project's architecture,
implementation methods, and tooling for development reference and team onboarding.
================================================================================
